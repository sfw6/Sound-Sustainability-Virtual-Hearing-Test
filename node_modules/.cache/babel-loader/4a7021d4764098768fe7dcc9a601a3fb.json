{"ast":null,"code":"var _jsxFileName = \"/Users/michelleponting/Desktop/hearingtest/webpage/src/components/hearingtest/hearingscreening/screening_routes/Audio.js\";\nimport React, { Component } from 'react';\nimport { TEST } from './TestConstant.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst tones = [{\n  hertz: 1000\n}, // 0\n{\n  hertz: 2000\n}, // 1\n{\n  hertz: 4000\n}, // 2\n{\n  hertz: 6000\n}, // 3\n{\n  hertz: 1000\n}, // 4\n{\n  hertz: 500\n} // 5\n];\nconst pathStart = \"audio_tones/\";\nconst pathEnd = \".mp3\";\n\nclass Audio extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      tones: [],\n      test: [],\n      currentEarID: 0,\n      // 0=R starting\n      currentHzID: 0,\n      // 0=1000 starting \n      // (do not need to track dbID since changes based on the yes or no)\n      activeEar: 'R',\n      activeHertz: 1000,\n      activeDecible: 30,\n      maxDecible: 20,\n      minDecible: 75\n    };\n\n    this.getDecibleID = db => {\n      let id = (db - 20) / 5;\n      return id;\n    };\n\n    this.handleDrop = () => {\n      let earID = this.state.currentEarID;\n      let hzID = this.state.currentHzID;\n      let db = this.state.activeDecible;\n      let dbID = this.getDecibleID(db); // test object copy\n\n      let test = [...this.state.test];\n\n      if (this.state.minDecible > db) {\n        // done\n        this.setState({\n          minDecible: db\n        });\n      }\n\n      if (this.state.maxDecible < db) {\n        // done\n        this.setState({\n          maxDecible: db\n        });\n      } // check if first time hz has played\n      // !yes = update ableToHear for hz level to true\n\n\n      if (!test[earID].hertz[hzID].ableToHear) {\n        test[earID].hertz[hzID].ableToHear = true;\n      } // check if test...minThres is larger than current dB\n      // yes = set current db as minThres\n\n\n      if (test[earID].hertz[hzID].minThres > db) {\n        test[earID].hertz[hzID].minThres = db;\n      } // check if this db has played before for this hz\n      // !yes = set hasPlayed for decible level to true\n\n\n      if (!test[earID].hertz[hzID].decibles[dbID].hasPlayed) {\n        test[earID].hertz[hzID].decibles[dbID].hasPlayed = true;\n      } // overall things to update\n      // current db numHeard +1\n\n\n      test[earID].hertz[hzID].decibles[dbID].numHeard += 1; // check numHeard + numMissed\n      // numHeard cannot be 0\n      // if 1 =\n      // if 1\n      // if at lowest dB then jump to the next hz\n\n      if (db - 10 < 20) {\n        if (db === 25) {\n          // case where db is at 25 so can still go down but not by 10\n          console.log(\"was at 25 now dropping 5dB\");\n          db -= 5;\n        } else if (hzID === 5 && earID === 1) {\n          // case where cannot go down any lower dB and cannot go to a higher hz and already on second ear\n          console.log(\"end test\");\n        } else if (hzID === 5 && earID === 0) {\n          // case where cannot go down any lower dB and cannot go to a higher hz and on first ear\n          earID = 1;\n        } else {\n          console.log(\"next hz\");\n          hzID += 1;\n          db = 30; // for testing purposes it is set here\n        }\n      } else {\n        // drop by 10 db\n        console.log(\"dropping 10dB\");\n        db -= 10;\n      }\n\n      this.setState({\n        test: test,\n        currentEarID: earID,\n        currentHzID: hzID,\n        activeEar: this.state.test[earID].ear,\n        activeHertz: this.state.tones[hzID].hertz,\n        activeDecible: db\n      }, () => console.log(this.state.test));\n    };\n\n    this.handleIncrease = () => {\n      let upHzID = this.state.currentHzID;\n      let db = this.state.activeDecible; // if at highest dB then jump to the next hz\n\n      if (db === 75) {\n        if (upHzID === 5) {\n          // case where cannot go up any higher and cannot go to a higher hz\n          console.log(\"now at highest db for highest hz\");\n        } else {\n          console.log(\"next hz\");\n          upHzID += 1;\n          this.setState({\n            currentHzID: upHzID,\n            activeHertz: this.state.tones[upHzID].hertz,\n            activeDecible: 30 // for testing purposes it is set here\n\n          });\n        }\n      } else {\n        // go up by 5db\n        console.log(\"up by 5dB\");\n        db += 5;\n        this.setState({\n          activeDecible: db\n        });\n      }\n    };\n\n    this.handleReplay = () => {\n      console.log(\"reset test\");\n      this.setState({\n        test: TEST,\n        currentEarID: 0,\n        // 0=R starting\n        currentHzID: 0,\n        // 0=1000 starting\n        activeEar: 'R',\n        activeHertz: 1000,\n        activeDecible: 30,\n        maxDecible: 20,\n        minDecible: 75\n      });\n    };\n\n    this.debuggin = () => {\n      // console.log(this.state.test[0].hertz[0].minThres)\n      let test = [...this.state.test]; // 1. Make a shallow copy of the object (entire state object)\n\n      test[0].hertz[0].minThres += 100; // 2. Replace the property you're intested in\n\n      this.setState({\n        test\n      }, // 3. Set the state to our new copy\n      () => console.log(this.state.test[0].hertz[0].minThres));\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      tones: tones,\n      test: TEST\n    });\n  } // use activeDecible to then pass to this function to get array id\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container text-center d-flex flex-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: this.debuggin,\n          children: \"test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(ToneDisplay, {\n          currentEar: this.state.activeEar // passing current ear\n          ,\n          currentHZ: this.state.activeHertz // passing current hz\n          ,\n          currentDB: this.state.activeDecible // passing current db\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 190,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"font-weight-light py-2 m-0\",\n          children: \"Do you hear this tone?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(AudioResponse, {\n          drop10: this.handleDrop // passing drop function\n          ,\n          increase5: this.handleIncrease // passing increase function\n          ,\n          replay: this.handleReplay // passing replay function (currently resetting hz/db)\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-danger\",\n          onClick: this.props.disable,\n          children: \"(placeholder) activate next button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nclass ToneDisplay extends Component {\n  render() {\n    // using the passed hz/db to concat different parts together for file path name\n    let ear = this.props.currentEar;\n    let hz = \"Hz\" + this.props.currentHZ;\n    let db = \"dB\" + this.props.currentDB;\n    console.log(hz + db);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: ear + \" \" + hz + \" \" + db\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: pathStart + ear + hz + db + pathEnd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nclass AudioResponse extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-inline-flex justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row py-2 mb-4 m-2 align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-dark text-nowrap screening-btn-hear\",\n            onClick: this.props.increase5,\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"bi bi-hand-thumbs-down text-black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 237,\n              columnNumber: 22\n            }, this), \" No\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 236,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn\",\n          onClick: this.props.replay,\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"mb-0\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"bi bi-arrow-repeat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 40\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-info text-nowrap screening-btn-hear\",\n            onClick: this.props.drop10,\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"bi bi-hand-thumbs-up text-black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 22\n            }, this), \" Yes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 246,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nexport default Audio;","map":{"version":3,"sources":["/Users/michelleponting/Desktop/hearingtest/webpage/src/components/hearingtest/hearingscreening/screening_routes/Audio.js"],"names":["React","Component","TEST","tones","hertz","pathStart","pathEnd","Audio","state","test","currentEarID","currentHzID","activeEar","activeHertz","activeDecible","maxDecible","minDecible","getDecibleID","db","id","handleDrop","earID","hzID","dbID","setState","ableToHear","minThres","decibles","hasPlayed","numHeard","console","log","ear","handleIncrease","upHzID","handleReplay","debuggin","componentDidMount","render","props","disable","ToneDisplay","currentEar","hz","currentHZ","currentDB","AudioResponse","increase5","replay","drop10"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport { TEST } from './TestConstant.js'\n\nconst tones = [\n   { hertz: 1000 }, // 0\n   { hertz: 2000 }, // 1\n   { hertz: 4000 }, // 2\n   { hertz: 6000 }, // 3\n   { hertz: 1000 }, // 4\n   { hertz: 500 }   // 5\n];\n\nconst pathStart = \"audio_tones/\";\nconst pathEnd = \".mp3\";\n\nclass Audio extends Component {\n   state = {\n      tones: [],\n      test: [],\n\n      currentEarID: 0, // 0=R starting\n      currentHzID: 0, // 0=1000 starting \n      // (do not need to track dbID since changes based on the yes or no)\n\n      activeEar: 'R',\n      activeHertz: 1000, \n      activeDecible: 30, \n\n      maxDecible: 20,\n      minDecible: 75\n   }\n\n   componentDidMount() {\n      this.setState({ \n         tones: tones,\n         test: TEST\n      });\n   }\n\n   // use activeDecible to then pass to this function to get array id\n   getDecibleID = (db) => {\n      let id = (db - 20) / 5;\n      return id;\n   }\n\n   // when you click yes\n   handleDrop = () => {\n      let earID = this.state.currentEarID;\n      let hzID = this.state.currentHzID;\n      let db = this.state.activeDecible;\n      let dbID = this.getDecibleID(db);\n\n      // test object copy\n      let test = [...this.state.test];\n\n      if (this.state.minDecible > db) { // done\n         this.setState({\n            minDecible: db\n         });\n      }\n      if (this.state.maxDecible < db) { // done\n         this.setState({\n            maxDecible: db\n         });\n      }\n\n      // check if first time hz has played\n         // !yes = update ableToHear for hz level to true\n      if (!test[earID].hertz[hzID].ableToHear) { \n         test[earID].hertz[hzID].ableToHear = true;\n      }\n\n      // check if test...minThres is larger than current dB\n         // yes = set current db as minThres\n      if (test[earID].hertz[hzID].minThres > db) {\n         test[earID].hertz[hzID].minThres = db;\n      }\n\n      // check if this db has played before for this hz\n         // !yes = set hasPlayed for decible level to true\n      if (!test[earID].hertz[hzID].decibles[dbID].hasPlayed) {\n         test[earID].hertz[hzID].decibles[dbID].hasPlayed = true;\n      } \n\n      // overall things to update\n         // current db numHeard +1\n      test[earID].hertz[hzID].decibles[dbID].numHeard += 1;\n\n\n      // check numHeard + numMissed\n         // numHeard cannot be 0\n         // if 1 =\n         // if 1\n\n      // if at lowest dB then jump to the next hz\n      if (db - 10 < 20) {\n         \n         if (db === 25) { // case where db is at 25 so can still go down but not by 10\n            console.log(\"was at 25 now dropping 5dB\");\n            db -= 5;\n         } else if (hzID === 5 && earID === 1) { // case where cannot go down any lower dB and cannot go to a higher hz and already on second ear\n            console.log(\"end test\");\n         } else if (hzID === 5 && earID === 0) { // case where cannot go down any lower dB and cannot go to a higher hz and on first ear\n            earID = 1;\n         } else {\n            console.log(\"next hz\");\n            hzID += 1;\n            db = 30; // for testing purposes it is set here\n         }\n      } else { // drop by 10 db\n         console.log(\"dropping 10dB\");\n         db -= 10;\n      }\n\n      this.setState({\n         test: test,\n         currentEarID: earID,\n         currentHzID: hzID, \n         activeEar: this.state.test[earID].ear,\n         activeHertz: this.state.tones[hzID].hertz, \n         activeDecible: db \n      }, () => console.log(this.state.test));\n   };\n\n   // when you click no\n   handleIncrease = () => {\n      let upHzID = this.state.currentHzID;\n      let db = this.state.activeDecible;\n\n      // if at highest dB then jump to the next hz\n      if (db === 75) {\n         \n         if (upHzID === 5) { // case where cannot go up any higher and cannot go to a higher hz\n            console.log(\"now at highest db for highest hz\")\n         } else {\n            console.log(\"next hz\")\n            upHzID += 1;\n            this.setState({\n               currentHzID: upHzID, \n               activeHertz: this.state.tones[upHzID].hertz, \n               activeDecible: 30 // for testing purposes it is set here\n            });\n         }\n      } else { // go up by 5db\n         console.log(\"up by 5dB\")\n         db += 5;\n         this.setState({\n            activeDecible: db\n         });\n      }\n   };\n\n   // currently only restarting at 500hz and 20 db\n   handleReplay = () => {\n      console.log(\"reset test\")\n      this.setState({\n         test: TEST,\n         \n         currentEarID: 0, // 0=R starting\n         currentHzID: 0, // 0=1000 starting\n\n         activeEar: 'R',\n         activeHertz: 1000, \n         activeDecible: 30, \n\n         maxDecible: 20,\n         minDecible: 75\n      });\n   };\n\n   // able to go down and manipulate the this.state.test object however deep need to\n   debuggin = () => {\n      // console.log(this.state.test[0].hertz[0].minThres)\n      \n      let test = [...this.state.test]; // 1. Make a shallow copy of the object (entire state object)\n      \n      test[0].hertz[0].minThres += 100; // 2. Replace the property you're intested in\n            \n      this.setState({test}, // 3. Set the state to our new copy\n         () => console.log(this.state.test[0].hertz[0].minThres)\n         )\n   }\n\n   render() {\n      return (\n         <main>\n            <div className=\"container text-center d-flex flex-column\">\n               <button type=\"button\" className=\"btn btn-secondary\" onClick={this.debuggin}>test</button>\n               <ToneDisplay \n                  currentEar={this.state.activeEar} // passing current ear\n                  currentHZ={this.state.activeHertz} // passing current hz\n                  currentDB={this.state.activeDecible} // passing current db\n               />\n               <h4 className=\"font-weight-light py-2 m-0\">Do you hear this tone?</h4>\n               <AudioResponse \n                  drop10={this.handleDrop} // passing drop function\n                  increase5={this.handleIncrease} // passing increase function\n                  replay={this.handleReplay} // passing replay function (currently resetting hz/db)\n               />\n               {/* placeholder button for now */}\n               <button type=\"button\" className=\"btn btn-danger\" onClick={this.props.disable}>(placeholder) activate next button</button>\n             </div>\n         </main>\n      );\n   }\n}\n\nclass ToneDisplay extends Component {\n   render() {\n      // using the passed hz/db to concat different parts together for file path name\n      let ear = this.props.currentEar;\n      let hz = \"Hz\" + this.props.currentHZ;\n      let db = \"dB\" + this.props.currentDB;\n      console.log(hz + db);\n\n      return (\n         <div>\n            <h1>\n               {ear + \" \" + hz + \" \" + db}\n            </h1>\n            <p>{pathStart + ear + hz + db + pathEnd}</p>\n         </div>\n      );\n   }\n}\n\nclass AudioResponse extends Component {\n   render() {\n      return (\n         <div className=\"d-inline-flex justify-content-center\">\n            <div className=\"row py-2 mb-4 m-2 align-items-center\">\n               <div className=\"col\">\n\n                  {/* onClick= functionality traces back to main component to run function */}\n                  <button type=\"button\" className=\"btn btn-dark text-nowrap screening-btn-hear\" onClick={this.props.increase5}> \n                     <i className=\"bi bi-hand-thumbs-down text-black\"></i> No\n                  </button>\n\n               </div>\n               <button type=\"button\" className=\"btn\" onClick={this.props.replay}>\n                  <h3 className=\"mb-0\"><i className=\"bi bi-arrow-repeat\"></i></h3>\n               </button>\n               <div className=\"col\">\n\n                  <button type=\"button\" className=\"btn btn-info text-nowrap screening-btn-hear\" onClick={this.props.drop10}>\n                     <i className=\"bi bi-hand-thumbs-up text-black\"></i> Yes\n                  </button>\n\n               </div>\n            </div>\n         </div>\n      );\n   }\n}\n\nexport default Audio;"]},"metadata":{},"sourceType":"module"}