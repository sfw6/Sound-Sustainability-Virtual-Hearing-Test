{"ast":null,"code":"var _jsxFileName = \"/Users/michelleponting/Desktop/hearingtest/webpage/src/components/hearingtest/hearingscreening/screening_routes/Audio.js\";\nimport React, { Component } from 'react'; // import useSound from 'use-sound';\n\nimport { TEST } from './TestConstant.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pathStart = \"audio_files/\";\nconst pathEnd = \".wav\";\n\nclass Audio extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      isTestFinished: false,\n      test: [],\n      currentEarID: 0,\n      // 0=R starting\n      currentHzID: 0,\n      // 0=1000 starting \n      // (do not need to track dbID since changes based on the yes or no)\n      activeEar: 'R',\n      activeHertz: 1000,\n      activeDecible: 30\n    };\n\n    this.getDecibleID = db => {\n      let id = (db - 15) / 5;\n      return id;\n    };\n\n    this.handleDrop = () => {\n      let earID = this.state.currentEarID;\n      let hzID = this.state.currentHzID;\n      let db = this.state.activeDecible;\n      let dbID = this.getDecibleID(db); // test object copy\n\n      let test = [...this.state.test]; // check if first time hz has played\n      // !yes = update ableToHear for hz level to true\n\n      if (!test[earID].hertz[hzID].ableToHear) {\n        test[earID].hertz[hzID].ableToHear = true;\n      } // check if this db has played before for this hz\n      // !yes = set hasPlayed for decible level to true\n\n\n      if (!test[earID].hertz[hzID].decibles[dbID].hasPlayed) {\n        test[earID].hertz[hzID].decibles[dbID].hasPlayed = true;\n      } // overall things to update\n      // current db numHeard +1\n\n\n      test[earID].hertz[hzID].decibles[dbID].numHeard += 1; // check numHeard + numMissed to tell if repeat or move on\n\n      let numHeard = test[earID].hertz[hzID].decibles[dbID].numHeard;\n      let numMissed = test[earID].hertz[hzID].decibles[dbID].numMissed;\n      let totalPlayed = numHeard + numMissed;\n      let hitRate = Number((numHeard / totalPlayed).toFixed(2)); // if at lowest dB then jump to the next hz\n\n      if (totalPlayed >= 2 && hitRate > .65) {\n        test[earID].hertz[hzID].minThres = db; // set min thres before moving on\n\n        if (earID === 1 && test[earID].hertz[hzID].hzLevel === 500) {\n          this.setState({\n            isTestFinished: true\n          });\n        } else {\n          if (test[earID].hertz[hzID].hzLevel !== 500) {\n            // change hz\n            hzID += 1;\n            db = 30;\n          } else if (test[earID].hertz[hzID].hzLevel === 500) {\n            // change ears\n            earID = 1;\n            hzID = 0;\n            db = 30;\n          }\n        }\n      } else if (db === 20) {\n        // edge case\n        db -= 5;\n      } else if (db - 10 >= 15) {\n        // drop case\n        db -= 10;\n      }\n\n      this.setState({\n        test: test,\n        currentEarID: earID,\n        currentHzID: hzID,\n        activeEar: this.state.test[earID].ear,\n        activeHertz: this.state.test[earID].hertz[hzID].hzLevel,\n        activeDecible: db\n      }, () => console.log(this.state.test));\n    };\n\n    this.handleIncrease = () => {\n      let earID = this.state.currentEarID;\n      let hzID = this.state.currentHzID;\n      let db = this.state.activeDecible;\n      let dbID = this.getDecibleID(db); // test object copy\n\n      let test = [...this.state.test]; // overall things to update\n      // current db numMissed +1\n\n      test[earID].hertz[hzID].decibles[dbID].numMissed += 1; // check first time hz played and unable to hear\n      // !hear = update numOnlyNo \n\n      if (!test[earID].hertz[hzID].ableToHear && db < 70) {\n        test[earID].hertz[hzID].numOnlyNo += 1;\n        db += 10;\n      } else if (db === 75) {\n        if (test[earID].hertz[hzID].hzLevel !== 500) {\n          // next hz\n          db = 30;\n          hzID += 1;\n        } else if (earID === 1 && test[earID].hertz[hzID].hzLevel === 500) {\n          // end test\n          this.setState({\n            isTestFinished: true\n          });\n        } else {\n          // switch ears\n          earID = 1;\n          hzID = 0;\n          db = 30;\n        }\n      } else {\n        db += 5;\n      }\n\n      this.setState({\n        test: test,\n        currentEarID: earID,\n        currentHzID: hzID,\n        activeEar: this.state.test[earID].ear,\n        activeHertz: this.state.test[earID].hertz[hzID].hzLevel,\n        activeDecible: db\n      }, () => console.log(this.state.test));\n    };\n\n    this.handleReplay = () => {\n      console.log(\"reset test\");\n      this.setState({\n        test: TEST,\n        currentEarID: 0,\n        // 0=R starting\n        currentHzID: 0,\n        // 0=1000 starting\n        activeEar: 'R',\n        activeHertz: 1000,\n        activeDecible: 30\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      test: TEST\n    });\n  } // use activeDecible to then pass to this function to get array id\n\n\n  render() {\n    if (this.state.isTestFinished) {\n      return /*#__PURE__*/_jsxDEV(\"main\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jumbotron bg-transparent\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Hearing Screening Complete!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Something about aknowledging this is a screening blah blah blah\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-check\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"form-check-input\",\n              type: \"checkbox\",\n              value: \"\",\n              id: \"soundSet50\",\n              onClick: () => {\n                this.props.disable();\n                this.props.passResults(this.props.test);\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 22\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-check-label\",\n              htmlFor: \"soundSet50\",\n              children: \"I confirm above statement\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 177,\n              columnNumber: 22\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"main\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container text-center d-flex flex-column\",\n          children: [/*#__PURE__*/_jsxDEV(ToneDisplay, {\n            currentEar: this.state.activeEar // passing current ear\n            ,\n            currentHZ: this.state.activeHertz // passing current hz\n            ,\n            currentDB: this.state.activeDecible // passing current db\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n            className: \"font-weight-light py-2 m-0\",\n            children: \"Do you hear this tone?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(AudioResponse, {\n            drop10: this.handleDrop // passing drop function\n            ,\n            increase5: this.handleIncrease // passing increase function\n            ,\n            replay: this.handleReplay // passing replay function (currently resetting hz/db)\n\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 16\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 13\n      }, this);\n    }\n  }\n\n}\n\nclass ToneDisplay extends Component {\n  render() {\n    // using the passed hz/db to concat different parts together for file path name\n    let ear = this.props.currentEar;\n    let hz = this.props.currentHZ + \"Hz\";\n    let db = this.props.currentDB;\n    console.log(hz + db);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: ear + hz + \" \" + db\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: pathStart + ear + hz + db + pathEnd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nclass AudioResponse extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-inline-flex justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row py-2 mb-4 m-2 align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-dark text-nowrap screening-btn-hear\",\n            onClick: this.props.increase5,\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"bi bi-hand-thumbs-down text-black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 22\n            }, this), \" No\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn\",\n          onClick: this.props.replay,\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"mb-0\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"bi bi-arrow-repeat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 239,\n              columnNumber: 40\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-info text-nowrap screening-btn-hear\",\n            onClick: this.props.drop10,\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"bi bi-hand-thumbs-up text-black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 22\n            }, this), \" Yes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 243,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nexport default Audio;","map":{"version":3,"sources":["/Users/michelleponting/Desktop/hearingtest/webpage/src/components/hearingtest/hearingscreening/screening_routes/Audio.js"],"names":["React","Component","TEST","pathStart","pathEnd","Audio","state","isTestFinished","test","currentEarID","currentHzID","activeEar","activeHertz","activeDecible","getDecibleID","db","id","handleDrop","earID","hzID","dbID","hertz","ableToHear","decibles","hasPlayed","numHeard","numMissed","totalPlayed","hitRate","Number","toFixed","minThres","hzLevel","setState","ear","console","log","handleIncrease","numOnlyNo","handleReplay","componentDidMount","render","props","disable","passResults","ToneDisplay","currentEar","hz","currentHZ","currentDB","AudioResponse","increase5","replay","drop10"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n// import useSound from 'use-sound';\n\nimport { TEST } from './TestConstant.js'\n\nconst pathStart = \"audio_files/\";\nconst pathEnd = \".wav\";\n\nclass Audio extends Component {\n   state = {\n      isTestFinished: false,\n      test: [],\n\n      currentEarID: 0, // 0=R starting\n      currentHzID: 0, // 0=1000 starting \n      // (do not need to track dbID since changes based on the yes or no)\n\n      activeEar: 'R',\n      activeHertz: 1000, \n      activeDecible: 30\n   }\n\n   componentDidMount() {\n      this.setState({ \n         test: TEST\n      });\n   }\n\n   // use activeDecible to then pass to this function to get array id\n   getDecibleID = (db) => {\n      let id = (db - 15) / 5;\n      return id;\n   }\n\n   // when you click yes\n   handleDrop = () => {\n      let earID = this.state.currentEarID;\n      let hzID = this.state.currentHzID;\n      let db = this.state.activeDecible;\n      let dbID = this.getDecibleID(db);\n\n      // test object copy\n      let test = [...this.state.test];\n\n      // check if first time hz has played\n         // !yes = update ableToHear for hz level to true\n      if (!test[earID].hertz[hzID].ableToHear) { \n         test[earID].hertz[hzID].ableToHear = true;\n      }\n\n      // check if this db has played before for this hz\n         // !yes = set hasPlayed for decible level to true\n      if (!test[earID].hertz[hzID].decibles[dbID].hasPlayed) {\n         test[earID].hertz[hzID].decibles[dbID].hasPlayed = true;\n      } \n\n      // overall things to update\n         // current db numHeard +1\n      test[earID].hertz[hzID].decibles[dbID].numHeard += 1;\n\n      // check numHeard + numMissed to tell if repeat or move on\n      let numHeard = test[earID].hertz[hzID].decibles[dbID].numHeard;\n      let numMissed = test[earID].hertz[hzID].decibles[dbID].numMissed;\n      let totalPlayed = numHeard + numMissed;\n      let hitRate = Number((numHeard / totalPlayed).toFixed(2));\n\n      // if at lowest dB then jump to the next hz\n      if ( totalPlayed >= 2 && hitRate > .65 ) {\n         test[earID].hertz[hzID].minThres = db; // set min thres before moving on\n\n         if (earID === 1 && test[earID].hertz[hzID].hzLevel === 500 ) {\n            this.setState({\n               isTestFinished: true\n            });\n         } else {\n            if (test[earID].hertz[hzID].hzLevel !== 500 ) { // change hz\n               hzID += 1;\n               db = 30;\n         \n            } else if (test[earID].hertz[hzID].hzLevel === 500) { // change ears\n               earID = 1;\n               hzID = 0;\n               db = 30;\n   \n            } \n         }\n\n      } else if (db === 20) { // edge case\n         db -= 5;\n      } else if (db - 10 >= 15) { // drop case\n         db -= 10;\n      } \n\n      this.setState({\n         test: test,\n         currentEarID: earID,\n         currentHzID: hzID, \n         activeEar: this.state.test[earID].ear,\n         activeHertz: this.state.test[earID].hertz[hzID].hzLevel, \n         activeDecible: db\n      }, () => console.log(this.state.test));\n   };\n\n   // when you click no\n   handleIncrease = () => {\n      let earID = this.state.currentEarID;\n      let hzID = this.state.currentHzID;\n      let db = this.state.activeDecible;\n      let dbID = this.getDecibleID(db);\n\n      // test object copy\n      let test = [...this.state.test];\n\n      // overall things to update\n         // current db numMissed +1\n      test[earID].hertz[hzID].decibles[dbID].numMissed += 1;\n\n      // check first time hz played and unable to hear\n         // !hear = update numOnlyNo \n      if (!test[earID].hertz[hzID].ableToHear && db < 70) {\n         test[earID].hertz[hzID].numOnlyNo += 1;\n         db += 10;\n      } else if (db === 75) {\n\n         if (test[earID].hertz[hzID].hzLevel !== 500) { // next hz\n            db = 30;\n            hzID += 1;\n\n         } else if (earID === 1 && test[earID].hertz[hzID].hzLevel === 500) { // end test\n            this.setState({\n               isTestFinished: true\n            });\n         } else { // switch ears\n            earID = 1;\n            hzID = 0;\n            db = 30;\n         }\n\n      } else {\n         db += 5;\n      }\n\n      this.setState({\n         test: test,\n         currentEarID: earID,\n         currentHzID: hzID, \n         activeEar: this.state.test[earID].ear,\n         activeHertz: this.state.test[earID].hertz[hzID].hzLevel, \n         activeDecible: db\n      }, () => console.log(this.state.test));\n   };\n\n   // currently only restarting at 500hz and 20 db\n   handleReplay = () => {\n      console.log(\"reset test\")\n      this.setState({\n         test: TEST,\n         \n         currentEarID: 0, // 0=R starting\n         currentHzID: 0, // 0=1000 starting\n\n         activeEar: 'R',\n         activeHertz: 1000, \n         activeDecible: 30\n      });\n   };\n\n   render() {\n      if (this.state.isTestFinished) {\n         return (\n            <main className=\"container\">\n               <div className=\"jumbotron bg-transparent\">\n                  <h3>Hearing Screening Complete!</h3>\n                  <p>Something about aknowledging this is a screening blah blah blah</p>\n                  <div className=\"form-check\">\n                     <input className=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"soundSet50\" onClick={() => { this.props.disable(); this.props.passResults(this.props.test);}} />\n                     <label className=\"form-check-label\" htmlFor=\"soundSet50\">\n                        I confirm above statement\n                     </label>\n                  </div>\n               </div>\n            </main>\n         );\n      } else {\n         return (\n            <main>\n               <div className=\"container text-center d-flex flex-column\">\n                  <ToneDisplay \n                     currentEar={this.state.activeEar} // passing current ear\n                     currentHZ={this.state.activeHertz} // passing current hz\n                     currentDB={this.state.activeDecible} // passing current db\n                  />\n                  <h4 className=\"font-weight-light py-2 m-0\">Do you hear this tone?</h4>\n                  <AudioResponse \n                     drop10={this.handleDrop} // passing drop function\n                     increase5={this.handleIncrease} // passing increase function\n                     replay={this.handleReplay} // passing replay function (currently resetting hz/db)\n                  />\n                </div>\n            </main>\n         );\n      }\n   }\n}\n\nclass ToneDisplay extends Component {\n   render() {\n      // using the passed hz/db to concat different parts together for file path name\n      let ear = this.props.currentEar;\n      let hz =  this.props.currentHZ + \"Hz\";\n      let db = this.props.currentDB;\n      console.log(hz + db);\n\n      return (\n         <div>\n            <h1>\n               {ear + hz + \" \" + db}\n            </h1>\n            <p>{pathStart + ear + hz + db + pathEnd}</p>\n         </div>\n      );\n   }\n}\n\nclass AudioResponse extends Component {\n   render() {\n      return (\n         <div className=\"d-inline-flex justify-content-center\">\n            <div className=\"row py-2 mb-4 m-2 align-items-center\">\n               <div className=\"col\">\n\n                  {/* onClick= functionality traces back to main component to run function */}\n                  <button type=\"button\" className=\"btn btn-dark text-nowrap screening-btn-hear\" onClick={this.props.increase5}> \n                     <i className=\"bi bi-hand-thumbs-down text-black\"></i> No\n                  </button>\n\n               </div>\n               <button type=\"button\" className=\"btn\" onClick={this.props.replay}>\n                  <h3 className=\"mb-0\"><i className=\"bi bi-arrow-repeat\"></i></h3>\n               </button>\n               <div className=\"col\">\n\n                  <button type=\"button\" className=\"btn btn-info text-nowrap screening-btn-hear\" onClick={this.props.drop10}>\n                     <i className=\"bi bi-hand-thumbs-up text-black\"></i> Yes\n                  </button>\n\n               </div>\n            </div>\n         </div>\n      );\n   }\n}\n\nexport default Audio;"]},"metadata":{},"sourceType":"module"}