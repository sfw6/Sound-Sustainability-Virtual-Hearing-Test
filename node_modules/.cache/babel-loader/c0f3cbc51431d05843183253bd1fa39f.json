{"ast":null,"code":"var _jsxFileName = \"/Users/michelleponting/Desktop/hearingtest/webpage/src/components/hearingtest/hearingscreening/screening_routes/Audio.js\";\nimport React, { Component } from 'react';\nimport { TEST } from './TestConstant.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pathStart = \"audio_tones/\";\nconst pathEnd = \".mp3\";\n\nclass Audio extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      test: [],\n      currentEarID: 0,\n      // 0=R starting\n      currentHzID: 0,\n      // 0=1000 starting \n      // (do not need to track dbID since changes based on the yes or no)\n      activeEar: 'R',\n      activeHertz: 1000,\n      activeDecible: 30,\n      maxDecible: 0,\n      // set arbitrary low and high to show if ever heard\n      minDecible: 100\n    };\n\n    this.getDecibleID = db => {\n      let id = (db - 20) / 5;\n      return id;\n    };\n\n    this.handleDrop = () => {\n      let earID = this.state.currentEarID;\n      let hzID = this.state.currentHzID;\n      let db = this.state.activeDecible;\n      let dbID = this.getDecibleID(db);\n      let maxDb = this.state.maxDb; // test object copy\n\n      let test = [...this.state.test];\n\n      if (this.state.maxDecible < db) {\n        // done\n        this.setState({\n          maxDecible: db\n        });\n      } // check if first time hz has played\n      // !yes = update ableToHear for hz level to true\n\n\n      if (!test[earID].hertz[hzID].ableToHear) {\n        test[earID].hertz[hzID].ableToHear = true;\n      } // check if test...minThres is larger than current dB\n      // yes = set current db as minThres\n\n\n      if (test[earID].hertz[hzID].minThres > db) {\n        test[earID].hertz[hzID].minThres = db;\n      } // check if this db has played before for this hz\n      // !yes = set hasPlayed for decible level to true\n\n\n      if (!test[earID].hertz[hzID].decibles[dbID].hasPlayed) {\n        test[earID].hertz[hzID].decibles[dbID].hasPlayed = true;\n      } // overall things to update\n      // current db numHeard +1\n\n\n      test[earID].hertz[hzID].decibles[dbID].numHeard += 1; // check numHeard + numMissed to tell if repeat or move on\n\n      let numHeard = test[earID].hertz[hzID].decibles[dbID].numHeard;\n      let numMissed = test[earID].hertz[hzID].decibles[dbID].numMissed;\n      let totalPlayed = numHeard + numMissed;\n      let hitRate = numHeard / totalPlayed;\n\n      if (totalPlayed < 2 && hitRate < .66) {\n        // if at lowest dB then jump to the next hz\n        if (db - 10 < 20) {\n          if (db === 25) {\n            // case where db is at 25 so can still go down but not by 10\n            db -= 5; // NEEDD TO FIX THE 5 TO EITHER 5 OR 4\n          } else if (hzID === 5) {\n            // case where cannot go down any lower dB and cannot go to a higher hz \n            test[earID].overallMinDecible = minDb;\n            test[earID].overallMaxDecible = maxDb;\n\n            if (earID === 0) {\n              // cannot go lower and on first ear\n              console.log(\"next ear, first hz, 30 db\");\n              earID = 1;\n              hzID = 0;\n              db = 30;\n              minDb = 100;\n              maxDb = 0;\n            } else {\n              console.log(\"end test\");\n            }\n          } else {\n            // just moving onto next hz for current ear\n            hzID += 1;\n            db = 30; // first ear -- if second time hearing 1000hz then set dB to min threshold\n            // if min threshold is not set (100), then just use 30\n\n            if (hzID === 4 && test[earID].hertz[hzID].minThres < 100 && earID !== 1) {\n              db = test[earID].hertz[hzID].minThres;\n            }\n          }\n        } else {\n          // drop by 10 db only\n          db -= 10;\n        }\n      }\n\n      this.setState({\n        test: test,\n        currentEarID: earID,\n        currentHzID: hzID,\n        activeEar: this.state.test[earID].ear,\n        activeHertz: this.state.test[earID].hertz[hzID].hzLevel,\n        activeDecible: db,\n        minDecible: minDb,\n        maxDecible: maxDb\n      }, () => console.log(this.state.test));\n    };\n\n    this.handleIncrease = () => {\n      let earID = this.state.currentEarID;\n      let hzID = this.state.currentHzID;\n      let db = this.state.activeDecible; // let dbID = this.getDecibleID(db);\n      // let minDb = this.state.minDb;\n      // let maxDb = this.state.maxDb;\n      // test object copy\n\n      let test = [...this.state.test]; // if at highest dB then jump to the next hz\n\n      if (db === 75) {\n        if (hzID === 5) {\n          // case where cannot go up any higher and cannot go to a higher hz\n          console.log(\"now at highest db for highest hz\");\n        } else {\n          console.log(\"next hz\");\n          hzID += 1;\n          this.setState({\n            currentHzID: hzID,\n            activeHertz: this.state.test[earID].hertz[hzID].hertz,\n            activeDecible: 30 // for testing purposes it is set here\n\n          });\n        }\n      } else {\n        // go up by 5db\n        console.log(\"up by 5dB\");\n        db += 5;\n        this.setState({\n          activeDecible: db\n        });\n      }\n    };\n\n    this.handleReplay = () => {\n      console.log(\"reset test\");\n      this.setState({\n        test: TEST,\n        currentEarID: 0,\n        // 0=R starting\n        currentHzID: 0,\n        // 0=1000 starting\n        activeEar: 'R',\n        activeHertz: 1000,\n        activeDecible: 30,\n        maxDecible: 0,\n        minDecible: 100\n      });\n    };\n\n    this.debuggin = () => {\n      // console.log(this.state.test[0].hertz[0].minThres)\n      let test = [...this.state.test]; // 1. Make a shallow copy of the object (entire state object)\n\n      test[0].hertz[0].minThres += 100; // 2. Replace the property you're intested in\n\n      this.setState({\n        test\n      }, // 3. Set the state to our new copy\n      () => console.log(this.state.test[0].hertz[0].minThres));\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      test: TEST\n    });\n  } // use activeDecible to then pass to this function to get array id\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container text-center d-flex flex-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: this.debuggin,\n          children: \"test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(ToneDisplay, {\n          currentEar: this.state.activeEar // passing current ear\n          ,\n          currentHZ: this.state.activeHertz // passing current hz\n          ,\n          currentDB: this.state.activeDecible // passing current db\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"font-weight-light py-2 m-0\",\n          children: \"Do you hear this tone?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(AudioResponse, {\n          drop10: this.handleDrop // passing drop function\n          ,\n          increase5: this.handleIncrease // passing increase function\n          ,\n          replay: this.handleReplay // passing replay function (currently resetting hz/db)\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-danger\",\n          onClick: this.props.disable,\n          children: \"(placeholder) activate next button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nclass ToneDisplay extends Component {\n  render() {\n    // using the passed hz/db to concat different parts together for file path name\n    let ear = this.props.currentEar;\n    let hz = \"Hz\" + this.props.currentHZ;\n    let db = \"dB\" + this.props.currentDB;\n    console.log(hz + db);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: ear + \" \" + hz + \" \" + db\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: pathStart + ear + hz + db + pathEnd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nclass AudioResponse extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-inline-flex justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row py-2 mb-4 m-2 align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-dark text-nowrap screening-btn-hear\",\n            onClick: this.props.increase5,\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"bi bi-hand-thumbs-down text-black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 22\n            }, this), \" No\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn\",\n          onClick: this.props.replay,\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"mb-0\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"bi bi-arrow-repeat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 40\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-info text-nowrap screening-btn-hear\",\n            onClick: this.props.drop10,\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"bi bi-hand-thumbs-up text-black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 22\n            }, this), \" Yes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nexport default Audio;","map":{"version":3,"sources":["/Users/michelleponting/Desktop/hearingtest/webpage/src/components/hearingtest/hearingscreening/screening_routes/Audio.js"],"names":["React","Component","TEST","pathStart","pathEnd","Audio","state","test","currentEarID","currentHzID","activeEar","activeHertz","activeDecible","maxDecible","minDecible","getDecibleID","db","id","handleDrop","earID","hzID","dbID","maxDb","setState","hertz","ableToHear","minThres","decibles","hasPlayed","numHeard","numMissed","totalPlayed","hitRate","overallMinDecible","minDb","overallMaxDecible","console","log","ear","hzLevel","handleIncrease","handleReplay","debuggin","componentDidMount","render","props","disable","ToneDisplay","currentEar","hz","currentHZ","currentDB","AudioResponse","increase5","replay","drop10"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport { TEST } from './TestConstant.js'\n\nconst pathStart = \"audio_tones/\";\nconst pathEnd = \".mp3\";\n\nclass Audio extends Component {\n   state = {\n      test: [],\n\n      currentEarID: 0, // 0=R starting\n      currentHzID: 0, // 0=1000 starting \n      // (do not need to track dbID since changes based on the yes or no)\n\n      activeEar: 'R',\n      activeHertz: 1000, \n      activeDecible: 30, \n\n      maxDecible: 0, // set arbitrary low and high to show if ever heard\n      minDecible: 100\n   }\n\n   componentDidMount() {\n      this.setState({ \n         test: TEST\n      });\n   }\n\n   // use activeDecible to then pass to this function to get array id\n   getDecibleID = (db) => {\n      let id = (db - 20) / 5;\n      return id;\n   }\n\n   // when you click yes\n   handleDrop = () => {\n      let earID = this.state.currentEarID;\n      let hzID = this.state.currentHzID;\n      let db = this.state.activeDecible;\n      let dbID = this.getDecibleID(db);\n      let maxDb = this.state.maxDb;\n\n      // test object copy\n      let test = [...this.state.test];\n\n      if (this.state.maxDecible < db) { // done\n         this.setState({\n            maxDecible: db\n         });\n      }\n\n      // check if first time hz has played\n         // !yes = update ableToHear for hz level to true\n      if (!test[earID].hertz[hzID].ableToHear) { \n         test[earID].hertz[hzID].ableToHear = true;\n      }\n\n      // check if test...minThres is larger than current dB\n         // yes = set current db as minThres\n      if (test[earID].hertz[hzID].minThres > db) {\n         test[earID].hertz[hzID].minThres = db;\n      }\n\n      // check if this db has played before for this hz\n         // !yes = set hasPlayed for decible level to true\n      if (!test[earID].hertz[hzID].decibles[dbID].hasPlayed) {\n         test[earID].hertz[hzID].decibles[dbID].hasPlayed = true;\n      } \n\n      // overall things to update\n         // current db numHeard +1\n      test[earID].hertz[hzID].decibles[dbID].numHeard += 1;\n\n\n      // check numHeard + numMissed to tell if repeat or move on\n      \n      let numHeard = test[earID].hertz[hzID].decibles[dbID].numHeard;\n      let numMissed = test[earID].hertz[hzID].decibles[dbID].numMissed;\n      let totalPlayed = numHeard + numMissed;\n      let hitRate = numHeard / totalPlayed;\n\n      if (totalPlayed < 2 && hitRate < .66) {\n         // if at lowest dB then jump to the next hz\n         if (db - 10 < 20) {\n            \n            if (db === 25) { // case where db is at 25 so can still go down but not by 10\n               db -= 5;\n\n\n\n\n// NEEDD TO FIX THE 5 TO EITHER 5 OR 4\n\n            } else if (hzID === 5 ) { // case where cannot go down any lower dB and cannot go to a higher hz \n               test[earID].overallMinDecible = minDb;\n               test[earID].overallMaxDecible = maxDb;\n\n               if (earID === 0) { // cannot go lower and on first ear\n                  console.log(\"next ear, first hz, 30 db\")\n                  earID = 1;\n                  hzID = 0;\n                  db = 30;\n                  minDb = 100;\n                  maxDb = 0;\n               } else {\n                  console.log(\"end test\");\n               }\n\n            } else { // just moving onto next hz for current ear\n               hzID += 1;\n               db = 30;\n\n               // first ear -- if second time hearing 1000hz then set dB to min threshold\n               // if min threshold is not set (100), then just use 30\n               if ((hzID === 4) && (test[earID].hertz[hzID].minThres < 100 && (earID !== 1))) {\n                  db = test[earID].hertz[hzID].minThres\n               }\n            }\n\n         } else { // drop by 10 db only\n            db -= 10;\n         }\n      } \n\n      this.setState({\n         test: test,\n         currentEarID: earID,\n         currentHzID: hzID, \n         activeEar: this.state.test[earID].ear,\n         activeHertz: this.state.test[earID].hertz[hzID].hzLevel, \n         activeDecible: db,\n         minDecible: minDb,\n         maxDecible: maxDb\n      }, () => console.log(this.state.test));\n   };\n\n   // when you click no\n   handleIncrease = () => {\n      let earID = this.state.currentEarID;\n      let hzID = this.state.currentHzID;\n      let db = this.state.activeDecible;\n      // let dbID = this.getDecibleID(db);\n      // let minDb = this.state.minDb;\n      // let maxDb = this.state.maxDb;\n\n      // test object copy\n      let test = [...this.state.test];\n\n\n      // if at highest dB then jump to the next hz\n      if (db === 75) {\n         \n         if (hzID === 5) { // case where cannot go up any higher and cannot go to a higher hz\n            console.log(\"now at highest db for highest hz\")\n         } else {\n            console.log(\"next hz\")\n            hzID += 1;\n            this.setState({\n               currentHzID: hzID, \n               activeHertz: this.state.test[earID].hertz[hzID].hertz, \n               activeDecible: 30 // for testing purposes it is set here\n            });\n         }\n      } else { // go up by 5db\n         console.log(\"up by 5dB\")\n         db += 5;\n         this.setState({\n            activeDecible: db\n         });\n      }\n   };\n\n   // currently only restarting at 500hz and 20 db\n   handleReplay = () => {\n      console.log(\"reset test\")\n      this.setState({\n         test: TEST,\n         \n         currentEarID: 0, // 0=R starting\n         currentHzID: 0, // 0=1000 starting\n\n         activeEar: 'R',\n         activeHertz: 1000, \n         activeDecible: 30, \n\n         maxDecible: 0,\n         minDecible: 100\n      });\n   };\n\n   // able to go down and manipulate the this.state.test object however deep need to\n   debuggin = () => {\n      // console.log(this.state.test[0].hertz[0].minThres)\n      \n      let test = [...this.state.test]; // 1. Make a shallow copy of the object (entire state object)\n      \n      test[0].hertz[0].minThres += 100; // 2. Replace the property you're intested in\n            \n      this.setState({test}, // 3. Set the state to our new copy\n         () => console.log(this.state.test[0].hertz[0].minThres)\n         )\n   }\n\n   render() {\n      return (\n         <main>\n            <div className=\"container text-center d-flex flex-column\">\n               <button type=\"button\" className=\"btn btn-secondary\" onClick={this.debuggin}>test</button>\n               <ToneDisplay \n                  currentEar={this.state.activeEar} // passing current ear\n                  currentHZ={this.state.activeHertz} // passing current hz\n                  currentDB={this.state.activeDecible} // passing current db\n               />\n               <h4 className=\"font-weight-light py-2 m-0\">Do you hear this tone?</h4>\n               <AudioResponse \n                  drop10={this.handleDrop} // passing drop function\n                  increase5={this.handleIncrease} // passing increase function\n                  replay={this.handleReplay} // passing replay function (currently resetting hz/db)\n               />\n               {/* placeholder button for now */}\n               <button type=\"button\" className=\"btn btn-danger\" onClick={this.props.disable}>(placeholder) activate next button</button>\n             </div>\n         </main>\n      );\n   }\n}\n\nclass ToneDisplay extends Component {\n   render() {\n      // using the passed hz/db to concat different parts together for file path name\n      let ear = this.props.currentEar;\n      let hz = \"Hz\" + this.props.currentHZ;\n      let db = \"dB\" + this.props.currentDB;\n      console.log(hz + db);\n\n      return (\n         <div>\n            <h1>\n               {ear + \" \" + hz + \" \" + db}\n            </h1>\n            <p>{pathStart + ear + hz + db + pathEnd}</p>\n         </div>\n      );\n   }\n}\n\nclass AudioResponse extends Component {\n   render() {\n      return (\n         <div className=\"d-inline-flex justify-content-center\">\n            <div className=\"row py-2 mb-4 m-2 align-items-center\">\n               <div className=\"col\">\n\n                  {/* onClick= functionality traces back to main component to run function */}\n                  <button type=\"button\" className=\"btn btn-dark text-nowrap screening-btn-hear\" onClick={this.props.increase5}> \n                     <i className=\"bi bi-hand-thumbs-down text-black\"></i> No\n                  </button>\n\n               </div>\n               <button type=\"button\" className=\"btn\" onClick={this.props.replay}>\n                  <h3 className=\"mb-0\"><i className=\"bi bi-arrow-repeat\"></i></h3>\n               </button>\n               <div className=\"col\">\n\n                  <button type=\"button\" className=\"btn btn-info text-nowrap screening-btn-hear\" onClick={this.props.drop10}>\n                     <i className=\"bi bi-hand-thumbs-up text-black\"></i> Yes\n                  </button>\n\n               </div>\n            </div>\n         </div>\n      );\n   }\n}\n\nexport default Audio;"]},"metadata":{},"sourceType":"module"}