{"ast":null,"code":"var _jsxFileName = \"/Users/michelleponting/Desktop/hearingtest/webpage/src/components/hearingtest/hearingscreening/screening_routes/Results.js\";\nimport React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction getData(results, right) {\n  let newData = [];\n\n  for (var key in results) {\n    if (results[key].minThres === 100) {\n      newData.push({\n        x: results[key].hzLevel,\n        y: 75\n      });\n    } else {\n      newData.push({\n        x: results[key].hzLevel,\n        y: results[key].minThres\n      });\n    }\n  }\n\n  if (right) {\n    newData = newData.splice(1);\n  }\n\n  return newData;\n}\n\nfunction getLevel(results) {\n  let max = 0;\n  let level = '';\n\n  for (var i = 0; i < 2; i++) {\n    for (var key in results[i].hertz) {\n      if (results[i].hertz[key].minThres > max) {\n        max = results[i].hertz[key].minThres;\n      }\n    }\n  }\n\n  if (max <= 20) {\n    level = \"NORMAL\";\n  } else if (max <= 40) {\n    level = \"MILD\";\n  } else if (max <= 55) {\n    level = \"MODERATE\";\n  } else if (max <= 70) {\n    level = \"MODERATELY SEVERE\";\n  } else {\n    level = \"SEVERE TO PROFOUND\";\n  }\n\n  return level;\n}\n\nconst labels = [0, 500, 1000, 2000, 4000, 6000];\n\nclass Results extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"container-fluid mx-auto\",\n      children: /*#__PURE__*/_jsxDEV(LineChart, {\n        testResults: this.props.testResults\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nfunction LineChart(props) {\n  let level = getLevel(props.testResults);\n  let data = {\n    labels: labels,\n    datasets: [{\n      label: 'Right Ear',\n      data: getData(props.testResults[0].hertz, true),\n      backgroundColor: \"rgba(4, 157, 217, .5)\",\n      borderColor: \"rgba(4, 157, 217, .5)\"\n    }, {\n      label: 'Left Ear',\n      data: getData(props.testResults[1].hertz, false),\n      backgroundColor: \"rgba(102, 255, 173, 0.5)\",\n      borderColor: \"rgba(102, 255, 173, 0.5)\"\n    }, {\n      label: 'Both Ears',\n      backgroundColor: \"rgba(104,205,214,255)\",\n      borderColor: \"rgba(104,205,214,255)\"\n    }]\n  };\n  let options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top'\n      },\n      title: {\n        display: true,\n        text: 'Your Audiogram'\n      }\n    },\n    scales: {\n      xAxes: {\n        title: {\n          display: true,\n          text: 'Frequency Level (Hz)'\n        }\n      },\n      yAxes: {\n        title: {\n          display: true,\n          text: 'Minimum Decibel You Heard (dB)'\n        },\n        min: 0,\n        max: 80,\n        ticks: {\n          stepsize: 5\n        }\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      align: \"center\",\n      children: [\" You have \", level, \" hearing loss\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 10\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: data,\n        options: options\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 10\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 7\n  }, this);\n}\n\n_c = LineChart;\nexport default Results;\n\nvar _c;\n\n$RefreshReg$(_c, \"LineChart\");","map":{"version":3,"sources":["/Users/michelleponting/Desktop/hearingtest/webpage/src/components/hearingtest/hearingscreening/screening_routes/Results.js"],"names":["React","Component","Line","getData","results","right","newData","key","minThres","push","x","hzLevel","y","splice","getLevel","max","level","i","hertz","labels","Results","render","props","testResults","LineChart","data","datasets","label","backgroundColor","borderColor","options","responsive","plugins","legend","position","title","display","text","scales","xAxes","yAxes","min","ticks","stepsize"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\n\n\nfunction getData(results, right){\n   let newData = [];\n   for(var key in results) {\n      if(results[key].minThres === 100) {\n         newData.push({x: results[key].hzLevel, y: 75});\n      } else {\n         newData.push({x: results[key].hzLevel, y:results[key].minThres});\n      }\n   }\n   if(right) {\n      newData = newData.splice(1);\n   }\n   return newData;\n} \n\nfunction getLevel(results){\n   let max = 0;\n   let level = '';\n   for(var i = 0; i < 2; i++){\n      for(var key in results[i].hertz){\n         if(results[i].hertz[key].minThres > max){\n            max = results[i].hertz[key].minThres;\n         }\n      }\n   }\n   if(max <= 20){\n      level = \"NORMAL\";\n   } else if (max <= 40) {\n      level = \"MILD\"\n   } else if (max <= 55) {\n      level = \"MODERATE\"\n   } else if (max <= 70) {\n      level = \"MODERATELY SEVERE\"\n   } else {\n      level = \"SEVERE TO PROFOUND\"\n   }\n   return level;\n}\n\n\nconst labels = [0, 500, 1000, 2000, 4000, 6000];\n\n\n\nclass Results extends Component {\n   \n   render() {\n      return (\n         <main className=\"container-fluid mx-auto\">\n            <LineChart \n               testResults = {this.props.testResults}\n            />\n         </main>\n      );\n   }\n} \n\nfunction LineChart(props){\n   let level = getLevel(props.testResults);\n   let data = {\n      labels: labels,\n      datasets: [\n         {\n            label: 'Right Ear',\n            data: getData(props.testResults[0].hertz, true),\n            backgroundColor: \"rgba(4, 157, 217, .5)\",\n            borderColor: \"rgba(4, 157, 217, .5)\"\n         },\n         {\n            label: 'Left Ear',\n            data: getData(props.testResults[1].hertz, false),\n            backgroundColor: \"rgba(102, 255, 173, 0.5)\",\n            borderColor: \"rgba(102, 255, 173, 0.5)\"\n         },\n         {\n            label: 'Both Ears',\n            backgroundColor: \"rgba(104,205,214,255)\",\n            borderColor: \"rgba(104,205,214,255)\"\n         }\n      ]\n   };\n   \n   let options = {\n      \n        responsive: true,\n        plugins: {\n          legend: {\n            position: 'top',\n          },\n          title: {\n            display: true,\n            text: 'Your Audiogram'\n          }\n        },\n        scales: {\n            xAxes: {\n               title: {\n                  display: true,\n                  text: 'Frequency Level (Hz)'\n                }\n            },\n            yAxes: {\n               title: {\n                  display: true,\n                  text: 'Minimum Decibel You Heard (dB)'\n                },\n                min: 0,\n                max: 80,\n                ticks: {\n                   stepsize: 5\n                }\n            }\n        }\n      \n   };\n   return (\n      <div>\n         <h2 align='center'> You have {level} hearing loss</h2>\n         \n         <div>\n            <Line data={data} options={options} />\n         </div>\n      </div>\n    );\n}\n\nexport default Results;"]},"metadata":{},"sourceType":"module"}