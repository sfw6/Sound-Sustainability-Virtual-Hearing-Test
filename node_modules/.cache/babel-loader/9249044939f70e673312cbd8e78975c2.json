{"ast":null,"code":"var _jsxFileName = \"/Users/michelleponting/Desktop/hearingtest/webpage/src/components/hearingtest/hearingscreening/screening_routes/Audio.js\";\nimport React, { Component } from 'react';\nimport { TEST } from './TestConstant.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst pathStart = \"audio_tones/\";\nconst pathEnd = \".mp3\";\n\nclass Audio extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      test: [],\n      currentEarID: 0,\n      // 0=R starting\n      currentHzID: 0,\n      // 0=1000 starting \n      // (do not need to track dbID since changes based on the yes or no)\n      activeEar: 'R',\n      activeHertz: 1000,\n      activeDecible: 30\n    };\n\n    this.getDecibleID = db => {\n      let id = (db - 15) / 5;\n      return id;\n    };\n\n    this.handleDrop = () => {\n      let earID = this.state.currentEarID;\n      let hzID = this.state.currentHzID;\n      let db = this.state.activeDecible;\n      let dbID = this.getDecibleID(db); // test object copy\n\n      let test = [...this.state.test]; // check if first time hz has played\n      // !yes = update ableToHear for hz level to true\n\n      if (!test[earID].hertz[hzID].ableToHear) {\n        test[earID].hertz[hzID].ableToHear = true;\n      } // check if this db has played before for this hz\n      // !yes = set hasPlayed for decible level to true\n\n\n      if (!test[earID].hertz[hzID].decibles[dbID].hasPlayed) {\n        test[earID].hertz[hzID].decibles[dbID].hasPlayed = true;\n      } // overall things to update\n      // current db numHeard +1\n\n\n      test[earID].hertz[hzID].decibles[dbID].numHeard += 1; // check numHeard + numMissed to tell if repeat or move on\n\n      let numHeard = test[earID].hertz[hzID].decibles[dbID].numHeard;\n      let numMissed = test[earID].hertz[hzID].decibles[dbID].numMissed;\n      let totalPlayed = numHeard + numMissed;\n      let hitRate = Number((numHeard / totalPlayed).toFixed(2)); // if at lowest dB then jump to the next hz\n\n      if (db === 20) {\n        // edge case\n        db -= 5;\n      } else if (totalPlayed >= 2 && hitRate > .65) {\n        console.log(\"inside total + hit of .65\");\n\n        if (earID === 0 && test[earID].hertz[hzID].hzLevel !== 500) {\n          // change hz\n          hzID += 1;\n          db = 30;\n          test[earID].hertz[hzID].minThres = db; // set min thres before moving on\n          // first ear -- if second time hearing 1000hz then set dB to min threshold\n          // if min threshold is not set (100), then just use 30\n\n          if (hzID === 4 && test[earID].hertz[hzID].minThres < 100 && earID !== 1) {\n            db = test[earID].hertz[0].minThres;\n          }\n        } else if (earID === 0 && test[earID].hertz[hzID].hzLevel === 500) {\n          // change ears\n          console.log(\"next ear, first hz, 30 db\");\n          earID = 1;\n          hzID = 0;\n          db = 30;\n        } else {\n          console.log(\"end test\"); // TO DO END THE TEST\n        }\n      } else if (db - 10 >= 15) {\n        // drop case\n        db -= 10;\n      }\n\n      this.setState({\n        test: test,\n        currentEarID: earID,\n        currentHzID: hzID,\n        activeEar: this.state.test[earID].ear,\n        activeHertz: this.state.test[earID].hertz[hzID].hzLevel,\n        activeDecible: db\n      }, () => console.log(this.state.test));\n    };\n\n    this.handleIncrease = () => {\n      let earID = this.state.currentEarID;\n      let hzID = this.state.currentHzID;\n      let db = this.state.activeDecible;\n      let dbID = this.getDecibleID(db); // test object copy\n\n      let test = [...this.state.test]; // overall things to update\n      // current db numMissed +1\n\n      test[earID].hertz[hzID].decibles[dbID].numMissed += 1;\n      let numMissed = test[earID].hertz[hzID].decibles[dbID].numMissed; // check first time hz played and unable to hear\n      // !hear = update numOnlyNo \n\n      if (!test[earID].hertz[hzID].ableToHear && db <= 70) {\n        test[earID].hertz[hzID].numOnlyNo += 1;\n        db += 10;\n      } else if (db === 75) {\n        if (test[earID].hertz[hzID].hzLevel !== 500) {\n          // next hz\n          hzID += 1;\n        } else if (earID === 1 && test[earID].hertz[hzID].hzLevel === 500 && numMissed === 2) {\n          // end test\n          console.log(\"end test\");\n        } else {\n          // switch ears\n          console.log(\"next ear, first hz, 30 db\");\n          earID = 1;\n          hzID = 0;\n          db = 30;\n        }\n      } else {\n        db += 5;\n      }\n\n      this.setState({\n        test: test,\n        currentEarID: earID,\n        currentHzID: hzID,\n        activeEar: this.state.test[earID].ear,\n        activeHertz: this.state.test[earID].hertz[hzID].hzLevel,\n        activeDecible: db\n      }, () => console.log(this.state.test));\n    };\n\n    this.handleReplay = () => {\n      console.log(\"reset test\");\n      this.setState({\n        test: TEST,\n        currentEarID: 0,\n        // 0=R starting\n        currentHzID: 0,\n        // 0=1000 starting\n        activeEar: 'R',\n        activeHertz: 1000,\n        activeDecible: 30\n      });\n    };\n\n    this.debuggin = () => {\n      // console.log(this.state.test[0].hertz[0].minThres)\n      let test = [...this.state.test]; // 1. Make a shallow copy of the object (entire state object)\n\n      test[0].hertz[0].minThres += 100; // 2. Replace the property you're intested in\n\n      this.setState({\n        test\n      }, // 3. Set the state to our new copy\n      () => console.log(this.state.test[0].hertz[0].minThres));\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      test: TEST\n    });\n  } // use activeDecible to then pass to this function to get array id\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"main\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container text-center d-flex flex-column\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: this.debuggin,\n          children: \"test\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(ToneDisplay, {\n          currentEar: this.state.activeEar // passing current ear\n          ,\n          currentHZ: this.state.activeHertz // passing current hz\n          ,\n          currentDB: this.state.activeDecible // passing current db\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"font-weight-light py-2 m-0\",\n          children: \"Do you hear this tone?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(AudioResponse, {\n          drop10: this.handleDrop // passing drop function\n          ,\n          increase5: this.handleIncrease // passing increase function\n          ,\n          replay: this.handleReplay // passing replay function (currently resetting hz/db)\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-danger\",\n          onClick: this.props.disable,\n          children: \"(placeholder) activate next button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nclass ToneDisplay extends Component {\n  render() {\n    // using the passed hz/db to concat different parts together for file path name\n    let ear = this.props.currentEar;\n    let hz = \"Hz\" + this.props.currentHZ;\n    let db = \"dB\" + this.props.currentDB;\n    console.log(hz + db);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: ear + \" \" + hz + \" \" + db\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: pathStart + ear + hz + db + pathEnd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nclass AudioResponse extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-inline-flex justify-content-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row py-2 mb-4 m-2 align-items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-dark text-nowrap screening-btn-hear\",\n            onClick: this.props.increase5,\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"bi bi-hand-thumbs-down text-black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 22\n            }, this), \" No\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn\",\n          onClick: this.props.replay,\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"mb-0\",\n            children: /*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"bi bi-arrow-repeat\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 235,\n              columnNumber: 40\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 234,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"col\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"btn btn-info text-nowrap screening-btn-hear\",\n            onClick: this.props.drop10,\n            children: [/*#__PURE__*/_jsxDEV(\"i\", {\n              className: \"bi bi-hand-thumbs-up text-black\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 22\n            }, this), \" Yes\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 237,\n          columnNumber: 16\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 10\n    }, this);\n  }\n\n}\n\nexport default Audio;","map":{"version":3,"sources":["/Users/michelleponting/Desktop/hearingtest/webpage/src/components/hearingtest/hearingscreening/screening_routes/Audio.js"],"names":["React","Component","TEST","pathStart","pathEnd","Audio","state","test","currentEarID","currentHzID","activeEar","activeHertz","activeDecible","getDecibleID","db","id","handleDrop","earID","hzID","dbID","hertz","ableToHear","decibles","hasPlayed","numHeard","numMissed","totalPlayed","hitRate","Number","toFixed","console","log","hzLevel","minThres","setState","ear","handleIncrease","numOnlyNo","handleReplay","debuggin","componentDidMount","render","props","disable","ToneDisplay","currentEar","hz","currentHZ","currentDB","AudioResponse","increase5","replay","drop10"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport { TEST } from './TestConstant.js'\n\nconst pathStart = \"audio_tones/\";\nconst pathEnd = \".mp3\";\n\nclass Audio extends Component {\n   state = {\n      test: [],\n\n      currentEarID: 0, // 0=R starting\n      currentHzID: 0, // 0=1000 starting \n      // (do not need to track dbID since changes based on the yes or no)\n\n      activeEar: 'R',\n      activeHertz: 1000, \n      activeDecible: 30\n   }\n\n   componentDidMount() {\n      this.setState({ \n         test: TEST\n      });\n   }\n\n   // use activeDecible to then pass to this function to get array id\n   getDecibleID = (db) => {\n      let id = (db - 15) / 5;\n      return id;\n   }\n\n   // when you click yes\n   handleDrop = () => {\n      let earID = this.state.currentEarID;\n      let hzID = this.state.currentHzID;\n      let db = this.state.activeDecible;\n      let dbID = this.getDecibleID(db);\n\n      // test object copy\n      let test = [...this.state.test];\n\n      // check if first time hz has played\n         // !yes = update ableToHear for hz level to true\n      if (!test[earID].hertz[hzID].ableToHear) { \n         test[earID].hertz[hzID].ableToHear = true;\n      }\n\n      // check if this db has played before for this hz\n         // !yes = set hasPlayed for decible level to true\n      if (!test[earID].hertz[hzID].decibles[dbID].hasPlayed) {\n         test[earID].hertz[hzID].decibles[dbID].hasPlayed = true;\n      } \n\n      // overall things to update\n         // current db numHeard +1\n      test[earID].hertz[hzID].decibles[dbID].numHeard += 1;\n\n      // check numHeard + numMissed to tell if repeat or move on\n      let numHeard = test[earID].hertz[hzID].decibles[dbID].numHeard;\n      let numMissed = test[earID].hertz[hzID].decibles[dbID].numMissed;\n      let totalPlayed = numHeard + numMissed;\n      let hitRate = Number((numHeard / totalPlayed).toFixed(2));\n\n      // if at lowest dB then jump to the next hz\n      if (db === 20) { // edge case\n         db -= 5;\n      } else if ( totalPlayed >= 2 && hitRate > .65 ) {\n         console.log(\"inside total + hit of .65\")\n\n         if ( earID === 0 && test[earID].hertz[hzID].hzLevel !== 500 ) { // change hz\n            hzID += 1;\n            db = 30;\n            test[earID].hertz[hzID].minThres = db; // set min thres before moving on\n\n            // first ear -- if second time hearing 1000hz then set dB to min threshold\n            // if min threshold is not set (100), then just use 30\n            if ((hzID === 4) && (test[earID].hertz[hzID].minThres < 100 && (earID !== 1))) {\n               db = test[earID].hertz[0].minThres\n            }         \n         } else if (earID === 0 && test[earID].hertz[hzID].hzLevel === 500) { // change ears\n            console.log(\"next ear, first hz, 30 db\")\n            earID = 1;\n            hzID = 0;\n            db = 30;\n         } else {\n            console.log(\"end test\");\n            // TO DO END THE TEST\n         }\n      } else if (db - 10 >= 15) { // drop case\n         db -= 10;\n      } \n\n      this.setState({\n         test: test,\n         currentEarID: earID,\n         currentHzID: hzID, \n         activeEar: this.state.test[earID].ear,\n         activeHertz: this.state.test[earID].hertz[hzID].hzLevel, \n         activeDecible: db\n      }, () => console.log(this.state.test));\n   };\n\n   // when you click no\n   handleIncrease = () => {\n      let earID = this.state.currentEarID;\n      let hzID = this.state.currentHzID;\n      let db = this.state.activeDecible;\n      let dbID = this.getDecibleID(db);\n\n      // test object copy\n      let test = [...this.state.test];\n\n      // overall things to update\n         // current db numMissed +1\n      test[earID].hertz[hzID].decibles[dbID].numMissed += 1;\n      let numMissed = test[earID].hertz[hzID].decibles[dbID].numMissed;\n\n      // check first time hz played and unable to hear\n         // !hear = update numOnlyNo \n      if (!test[earID].hertz[hzID].ableToHear && db <= 70) {\n         test[earID].hertz[hzID].numOnlyNo += 1;\n         db += 10;\n      } else if (db === 75) {\n         if (test[earID].hertz[hzID].hzLevel !== 500) { // next hz\n            hzID += 1;\n         } else if (earID === 1 && test[earID].hertz[hzID].hzLevel === 500 && numMissed === 2) { // end test\n            console.log(\"end test\")\n         } else { // switch ears\n            console.log(\"next ear, first hz, 30 db\")\n            earID = 1;\n            hzID = 0;\n            db = 30;\n         }\n\n      } else {\n         db += 5;\n      }\n\n      this.setState({\n         test: test,\n         currentEarID: earID,\n         currentHzID: hzID, \n         activeEar: this.state.test[earID].ear,\n         activeHertz: this.state.test[earID].hertz[hzID].hzLevel, \n         activeDecible: db\n      }, () => console.log(this.state.test));\n   };\n\n   // currently only restarting at 500hz and 20 db\n   handleReplay = () => {\n      console.log(\"reset test\")\n      this.setState({\n         test: TEST,\n         \n         currentEarID: 0, // 0=R starting\n         currentHzID: 0, // 0=1000 starting\n\n         activeEar: 'R',\n         activeHertz: 1000, \n         activeDecible: 30\n      });\n   };\n\n   // able to go down and manipulate the this.state.test object however deep need to\n   debuggin = () => {\n      // console.log(this.state.test[0].hertz[0].minThres)\n      \n      let test = [...this.state.test]; // 1. Make a shallow copy of the object (entire state object)\n      \n      test[0].hertz[0].minThres += 100; // 2. Replace the property you're intested in\n            \n      this.setState({test}, // 3. Set the state to our new copy\n         () => console.log(this.state.test[0].hertz[0].minThres)\n         )\n   }\n\n   render() {\n      return (\n         <main>\n            <div className=\"container text-center d-flex flex-column\">\n               <button type=\"button\" className=\"btn btn-secondary\" onClick={this.debuggin}>test</button>\n               <ToneDisplay \n                  currentEar={this.state.activeEar} // passing current ear\n                  currentHZ={this.state.activeHertz} // passing current hz\n                  currentDB={this.state.activeDecible} // passing current db\n               />\n               <h4 className=\"font-weight-light py-2 m-0\">Do you hear this tone?</h4>\n               <AudioResponse \n                  drop10={this.handleDrop} // passing drop function\n                  increase5={this.handleIncrease} // passing increase function\n                  replay={this.handleReplay} // passing replay function (currently resetting hz/db)\n               />\n               {/* placeholder button for now */}\n               <button type=\"button\" className=\"btn btn-danger\" onClick={this.props.disable}>(placeholder) activate next button</button>\n             </div>\n         </main>\n      );\n   }\n}\n\nclass ToneDisplay extends Component {\n   render() {\n      // using the passed hz/db to concat different parts together for file path name\n      let ear = this.props.currentEar;\n      let hz = \"Hz\" + this.props.currentHZ;\n      let db = \"dB\" + this.props.currentDB;\n      console.log(hz + db);\n\n      return (\n         <div>\n            <h1>\n               {ear + \" \" + hz + \" \" + db}\n            </h1>\n            <p>{pathStart + ear + hz + db + pathEnd}</p>\n         </div>\n      );\n   }\n}\n\nclass AudioResponse extends Component {\n   render() {\n      return (\n         <div className=\"d-inline-flex justify-content-center\">\n            <div className=\"row py-2 mb-4 m-2 align-items-center\">\n               <div className=\"col\">\n\n                  {/* onClick= functionality traces back to main component to run function */}\n                  <button type=\"button\" className=\"btn btn-dark text-nowrap screening-btn-hear\" onClick={this.props.increase5}> \n                     <i className=\"bi bi-hand-thumbs-down text-black\"></i> No\n                  </button>\n\n               </div>\n               <button type=\"button\" className=\"btn\" onClick={this.props.replay}>\n                  <h3 className=\"mb-0\"><i className=\"bi bi-arrow-repeat\"></i></h3>\n               </button>\n               <div className=\"col\">\n\n                  <button type=\"button\" className=\"btn btn-info text-nowrap screening-btn-hear\" onClick={this.props.drop10}>\n                     <i className=\"bi bi-hand-thumbs-up text-black\"></i> Yes\n                  </button>\n\n               </div>\n            </div>\n         </div>\n      );\n   }\n}\n\nexport default Audio;"]},"metadata":{},"sourceType":"module"}